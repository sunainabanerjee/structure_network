import numpy as np
from enum import Enum
from .distance_dependent import DistanceDependentPotential
from structure_network.structure.amino_acids import AminoAcid, get_amino, valid_amino_acids

__author__ = ['sumanta mukherjee', 'sunaina banerjee']
__email__ = ["mukherjee.sumanta.iisc@gmail.com", "ms.sunaina.b@gmail.com"]
__all__ = ['get_pair_potential',
           'supported_potentials',
           'PairPotential']


__mj_potential__ = np.array([
    [3.28, 3.93, 2.52, 2.45, 4.04, 2.91, 2.95, 4.18, 2.28, 4.06,
     3.93, 2.59, 2.81, 2.67, 2.56, 2.76, 2.97, 3.93, 3.81, 3.41],
    [3.93, 4.54, 3.12, 2.97, 4.94, 3.68, 3.87, 4.90, 2.71, 4.72,
     4.72, 3.14, 3.50, 3.31, 3.02, 3.56, 3.73, 4.53, 4.60, 4.08],
    [2.52, 3.12, 1.85, 1.77, 2.95, 2.34, 2.70, 3.09, 2.22, 2.84,
     2.80, 2.21, 2.16, 2.09, 2.67, 2.31, 2.43, 2.82, 3.12, 2.84],
    [2.45, 2.97, 1.77, 1.60, 2.89, 2.12, 2.49, 3.11, 2.20, 2.85,
     2.90, 2.14, 2.09, 1.93, 2.61, 2.22, 2.33, 2.84, 3.04, 2.71],
    [4.04, 4.94, 2.95, 2.89, 5.22, 3.52, 3.95, 5.25, 2.70, 5.18,
     5.03, 3.17, 3.54, 3.25, 3.26, 3.46, 3.70, 4.89, 5.07, 4.43],
    [2.91, 3.68, 2.34, 2.12, 3.52, 2.62, 2.77, 3.61, 2.08, 3.56,
     3.40, 2.41, 2.60, 2.39, 2.43, 2.61, 2.78, 3.42, 3.47, 3.12],
    [2.95, 3.87, 2.70, 2.49, 3.95, 2.77, 3.27, 3.74, 2.02, 3.69,
     3.80, 2.60, 2.69, 2.48, 2.60, 2.76, 2.97, 3.44, 3.94, 3.42],
    [4.18, 4.90, 3.09, 3.11, 5.25, 3.61, 3.74, 5.29, 2.95, 5.21,
     4.95, 3.13, 3.62, 3.30, 3.42, 3.58, 3.87, 5.01, 4.98, 4.51],
    [2.28, 2.71, 2.22, 2.20, 2.70, 2.08, 2.02, 2.95, 1.14, 2.74,
     2.58, 1.95, 1.95, 1.84, 1.47, 2.01, 2.13, 2.69, 2.84, 2.58],
    [4.06, 4.72, 2.84, 2.85, 5.18, 3.56, 3.69, 5.21, 2.74, 5.03,
     4.91, 3.09, 3.55, 3.17, 3.24, 3.47, 3.61, 4.85, 4.87, 4.32],
    [3.93, 4.72, 2.80, 2.90, 5.03, 3.40, 3.80, 4.95, 2.58, 4.91,
     4.80, 3.04, 3.43, 3.24, 3.15, 3.35, 3.62, 4.59, 4.87, 4.30],
    [2.59, 3.14, 2.21, 2.14, 3.17, 2.41, 2.60, 3.13, 1.95, 3.09,
     3.04, 2.24, 2.28, 2.26, 2.19, 2.36, 2.43, 3.02, 3.23, 2.82],
    [2.81, 3.50, 2.16, 2.09, 3.54, 2.60, 2.69, 3.62, 1.95, 3.55,
     3.43, 2.28, 2.53, 2.35, 2.29, 2.57, 2.68, 3.39, 3.60, 3.23],
    [2.67, 3.31, 2.09, 1.93, 3.25, 2.39, 2.48, 3.30, 1.84, 3.17,
     3.24, 2.26, 2.35, 1.94, 2.25, 2.34, 2.46, 3.05, 3.25, 2.90],
    [2.56, 3.02, 2.67, 2.61, 3.26, 2.43, 2.60, 3.42, 1.47, 3.24,
     3.15, 2.19, 2.29, 2.25, 2.03, 2.46, 2.55, 3.00, 3.42, 3.01],
    [2.76, 3.56, 2.31, 2.22, 3.46, 2.61, 2.76, 3.58, 2.01, 3.47,
     3.35, 2.36, 2.57, 2.34, 2.46, 2.47, 2.74, 3.35, 3.30, 2.97],
    [2.97, 3.73, 2.43, 2.33, 3.70, 2.78, 2.97, 3.87, 2.13, 3.61,
     3.62, 2.43, 2.68, 2.46, 2.55, 2.74, 2.81, 3.58, 3.44, 3.16],
    [3.93, 4.53, 2.82, 2.84, 4.89, 3.42, 3.44, 5.01, 2.69, 4.85,
     4.59, 3.02, 3.39, 3.05, 3.00, 3.35, 3.58, 4.64, 4.63, 4.04],
    [3.81, 4.60, 3.12, 3.04, 5.07, 3.47, 3.94, 4.98, 2.84, 4.87,
     4.87, 3.23, 3.60, 3.25, 3.42, 3.30, 3.44, 4.63, 4.74, 4.20],
    [3.41, 4.08, 2.84, 2.71, 4.43, 3.12, 3.42, 4.51, 2.58, 4.32,
     4.30, 2.82, 3.23, 2.90, 3.01, 2.97, 3.16, 4.04, 4.20, 3.69]
 ])

__contact_potential__ = np.array([
    [-0.08, -0.30, 0.10,  0.03, -0.05, -0.09, -0.15, -0.64,  0.00, -0.57,
      0.05, -0.14, 0.41, -0.11,  0.07, -0.01, -0.22, -0.60, -0.08, -0.37],
    [-0.30, -1.79, 0.55,  0.04, -0.98, -0.42, -0.82, -0.48,  0.00, -0.69,
     -1.23, -0.32, 0.07, -0.49, -0.40, -0.20, -0.38, -0.94, -0.30, -0.96],
    [ 0.10,  0.55, 0.60,  0.68,  0.20, -0.06, -0.06,  0.04, -0.09,  0.50,
      1.07, -0.12, 0.84,  0.46, -0.15, -0.09, -0.03,  0.25,  0.24,  0.11],
    [ 0.03,  0.04, 0.68,  0.21,  0.19,  0.40, -0.53, -0.20, -0.09, -0.05,
      0.02, -0.25, 0.33,  0.62, -0.26,  0.30,  0.15, -0.02,  0.32,  0.22],
    [-0.05, -0.98, 0.20, 0.19, -0.61, 0.21, -0.75, -0.66, -0.17, -1.02,
     -1.03, -0.02, -0.43, 0.10, -0.22, 0.14, -0.19, -0.78, -0.89, -0.82],
    [-0.09, -0.42, -0.06, 0.40, 0.21, 0.04, 0.00, 0.40, 0.10, -0.08,
     0.00, -0.18, 0.40, 0.12, -0.15, -0.04, 0.13, -0.20, -0.14, -0.32],
    [-0.15, -0.82, -0.06, -0.53, -0.75, 0.00, 0.14, -0.52, 0.14, -0.36,
     -0.35, 0.06, -0.22, 0.05, -0.01, -0.59, -0.27, -0.35, -0.41, -0.67],
    [-0.64, -0.48, 0.04, -0.20, -0.66, 0.40, -0.52, -0.71, -0.26, -1.04,
     -0.41, 0.39, 0.25, -0.39, -0.08, -0.13, -0.29, -0.98, -0.89, -0.87],
    [ 0.00, 0.00, -0.09, -0.09, -0.17, 0.10, 0.14, -0.26, 1.45, 0.10,
      0.55, 0.18, 0.51, 0.04, 0.30, 0.18, 0.09, -0.08, -0.30, -0.20],
    [-0.57, -0.69, 0.50, -0.05, -1.02, -0.08, -0.36, -1.04, 0.10, -1.14,
     -0.31, -0.10, 0.09, -0.13, -0.10, -0.07, -0.39, -1.03, -0.97, -0.60],
    [ 0.05, -1.23, 1.07, 0.02, -1.03, 0.00, -0.35, -0.41, 0.55, -0.31,
      0.36, 0.31, -0.25, -0.54, -0.43, -0.47, 0.06, -0.94, -0.07, -1.10],
    [-0.14, -0.32, -0.12, -0.25, -0.02, -0.18, 0.06, 0.39, 0.18, -0.10,
     0.31, -0.86, 0.11, -0.05, 0.04, 0.37, -0.27, -0.24, -0.68, -0.74],
    [ 0.41, 0.07, 0.84, 0.33, -0.43, 0.40, -0.22, 0.25, 0.51, 0.09,
      -0.25, 0.11, 0.28, -0.21, -0.02, 0.44, 0.36, -0.08, -0.44, -0.45],
    [-0.11, -0.49, 0.46, 0.62, 0.10, 0.12, 0.05, -0.39, 0.04, -0.13,
     -0.54, -0.05, -0.21, -0.08, 0.62, 0.40, -0.17, -0.09, 0.40, -0.39],
    [ 0.07, -0.40, -0.15, -0.26, -0.22, -0.15, -0.01, -0.08, 0.30, -0.10,
      -0.43, 0.04, -0.02, 0.62, 0.23, 0.61, -0.17, -0.48, -0.78, 0.21],
    [-0.01, -0.20, -0.09, 0.30, 0.14, -0.04, -0.59, -0.13, 0.18, -0.07,
     -0.47, 0.37, 0.44, 0.40, 0.61, -0.13, 0.05, -0.31, -0.20, 0.25],
    [-0.22, -0.38, -0.03, 0.15, -0.19, 0.13, -0.27, -0.29, 0.09, -0.39,
     0.06, -0.27, 0.36, -0.17, -0.17, 0.05, 0.26, 0.06, 0.07, -0.23],
    [-0.60, -0.94, 0.25, -0.02, -0.78, -0.20, -0.35, -0.98, -0.08, -1.03,
     -0.94, -0.24, -0.08, -0.09, -0.48, -0.31, 0.06, -1.15, -0.60, -0.70],
    [-0.08, -0.30, 0.24, 0.32, -0.89, -0.14, -0.41, -0.89, -0.30, -0.97,
     -0.07, -0.68, -0.44, 0.40, -0.78, -0.20, 0.07, -0.60, 0.02, -0.99],
    [-0.37, -0.96, 0.11, 0.22, -0.82, -0.32, -0.67, -0.87, -0.20, -0.60,
     -1.10, -0.74, -0.45, -0.39, 0.21, 0.25, -0.23, -0.70, -0.99, 0.35]
])


__optimized_potential__ = np.array([
    [ 0.001461, -0.000751, -0.001348, -0.002376,  0.005126,
     -0.003111, -0.002432, -0.002119,  0.001754,  0.000864,
     -0.001496,  0.003323, -0.005081,  0.005029, -0.002511,
     -0.001515, -0.000218,  0.003642, -0.009737, -0.000724],
    [-0.000751, -0.002544,  0.002278,  0.002791, -0.013925,
      0.001847,  0.054553,  0.002965, -0.006040, -0.000196,
      0.014331,  0.006139, -0.001720,  0.001387, -0.006062,
      0.001837,  0.002620,  0.000296, -0.035239,  0.002585],
    [-0.001348,  0.002278, -0.000531,  0.002194,  0.004899,
      0.001528, -0.002501,  0.002659, -0.000642,  0.000585,
      0.001491,  0.007855,  0.000755, -0.001466,  0.001974,
     -0.001609,  0.002193,  0.000092, -0.007832,  0.000182],
    [-0.002376,  0.002791,  0.002194,  0.006456, -0.001143,
     -0.000113, -0.007232,  0.007647, -0.009604, -0.000453,
      0.003231, -0.003154,  0.005402, -0.005234, -0.004586,
      0.002888,  0.000948,  0.001387, -0.009357,  0.003261],
    [ 0.005126, -0.013925,  0.004899, -0.001143, -0.013128,
      0.000189, -0.000190, -0.009792, -0.004479, -0.002127,
      0.001010,  0.003461, -0.006986,  0.003790,  0.004855,
     -0.001223,  0.004102,  0.000008,  0.006057, -0.003256],
    [-0.003111,  0.001847,  0.001528, -0.000113,  0.000189,
      0.000990, -0.000951,  0.000446, -0.001308, -0.001538,
      0.002339, -0.001649,  0.009071, -0.000425,  0.002466,
     -0.003528,  0.001084,  0.001995, -0.012366, -0.000737],
    [-0.002432,  0.054553, -0.002501, -0.007232, -0.000190,
     -0.000951,  0.001314, -0.000476,  0.002934, -0.004529,
      0.031785,  0.008099, -0.002032,  0.005803,  0.009985,
      0.009858, -0.005871, -0.006893, -0.006739,  0.007276],
    [-0.002119,  0.002965,  0.002659,  0.007647, -0.009792,
      0.000446, -0.000476,  0.006801,  0.000855, -0.000782,
     -0.009283,  0.002317,  0.004353, -0.001875,  0.001034,
      0.001538, -0.004179,  0.002618,  0.002734, -0.004792],
    [ 0.001754, -0.006040, -0.000642, -0.009604, -0.004479,
     -0.001308,  0.002934,  0.000855,  0.005109,  0.002119,
     -0.004667,  0.006158,  0.009888,  0.002349,  0.007273,
      0.005015, -0.005895, -0.006987, -0.001668,  0.007956],
    [ 0.000864, -0.000196,  0.000585, -0.000453, -0.002127,
     -0.001538, -0.004529, -0.000782,  0.002119, -0.000748,
     -0.002531, -0.000605, -0.005026, -0.004168, -0.001302,
      0.001004,  0.003770, -0.001940,  0.010659,  0.003540],
    [-0.001496,  0.014331,  0.001491,  0.003231,  0.001010,
      0.002339,  0.031785, -0.009283, -0.004667, -0.002531,
      0.031655,  0.018413, -0.008698, -0.002908, -0.004676,
      0.002007, -0.002190, -0.005331,  0.984886, -0.003258],
    [ 0.003323,  0.006139,  0.007855, -0.003154,  0.003461,
     -0.001649,  0.008099,  0.002317,  0.006158, -0.000605,
      0.018413, -0.001962,  0.003707,  0.004502, -0.006728,
      0.006249, -0.005914, -0.001040, -0.003028, -0.006968],
    [-0.005081, -0.001720,  0.000755,  0.005402, -0.006986,
      0.009071, -0.002032,  0.004353,  0.009888, -0.005026,
     -0.008698,  0.003707, -0.003621,  0.000525, -0.000067,
     -0.003125,  0.005402,  0.001362,  0.013914,  0.000996],
    [ 0.005029,  0.001387, -0.001466, -0.005234,  0.003790,
     -0.000425,  0.005803, -0.001875,  0.002349, -0.004168,
     -0.002908,  0.004502,  0.000525,  0.008438, -0.001210,
     -0.009002,  0.001006,  0.000029,  0.012075, -0.005137],
    [-0.002511, -0.006062,  0.001974, -0.004586,  0.004855,
      0.002466,  0.009985,  0.001034,  0.007273, -0.001302,
     -0.004676, -0.006728, -0.000067, -0.001210,  0.009875,
     -0.001180,  0.003967, -0.005168, -0.014845,  0.004237],
    [-0.001515,  0.001837, -0.001609,  0.002888, -0.001223,
     -0.003528,  0.009858,  0.001538,  0.005015,  0.001004,
      0.002007,  0.006249, -0.003125, -0.009002, -0.001180,
     -0.000802, -0.002393, -0.000443, -0.002330, -0.001895],
    [-0.000218,  0.002620,  0.002193,  0.000948,  0.004102,
      0.001084, -0.005871, -0.004179, -0.005895,  0.003770,
     -0.002190, -0.005914,  0.005402,  0.001006,  0.003967,
     -0.002393,  0.003269,  0.004075,  0.003848, -0.001235],
    [ 0.003642,  0.000296,  0.000092,  0.001387,  0.000008,
      0.001995, -0.006893,  0.002618, -0.006987, -0.001940,
     -0.005331, -0.001040,  0.001362,  0.000029, -0.005168,
     -0.000443,  0.004075,  0.001445, -0.001516, -0.002175],
    [-0.009737, -0.035239, -0.007832, -0.009357,  0.006057,
     -0.012366, -0.006739,  0.002734, -0.001668,  0.010659,
      0.984886, -0.003028,  0.013914,  0.012075, -0.014845,
     -0.002330,  0.003848, -0.001516,  0.131813,  0.003708],
    [-0.000724,  0.002585,  0.000182,  0.003261, -0.003256,
     -0.000737,  0.007276, -0.004792,  0.007956,  0.003540,
     -0.003258, -0.006968,  0.000996, -0.005137,  0.004237,
     -0.001895, -0.001235, -0.002175,  0.003708, -0.007699]
    ])


class PairPotential(Enum):
    mj = 'mj'
    charmm = 'charmm'


def supported_potentials():
    return [fld.value for fld in PairPotential]


def get_pair_potential(amino1, amino2, distance, pot_type=PairPotential.mj):
    assert distance >= 0

    if isinstance(amino1, str):
        amino1 = get_amino(amino1)
    assert isinstance(amino1, AminoAcid)

    if isinstance(amino2, str):
        amino2 = get_amino(amino2)
    assert isinstance(amino2, AminoAcid)

    aminos = valid_amino_acids(one_letter=True)

    if pot_type == PairPotential.mj:
        return __mj_potential__[aminos.index(amino1.name(one_letter_code=True)),
                                aminos.index(amino2.name(one_letter_code=True))] \
            if distance < 6.5 else 0
    elif pot_type == PairPotential.charmm:
        instance = DistanceDependentPotential()
        return instance(amino1.name(one_letter_code=True),
                        amino2.name(one_letter_code=True),
                        distance)
    else:
        raise ValueError("Error: unknown potential {}".format(pot_type))
